from typing import Any, Generator, IO, List, Optional, Tuple, Type, Union

import os

__version__ = ...  # type: str

class Path(str):
    parts: Tuple[str, ...]
    drive: str
    root: str
    anchor: str
    name: str
    suffix: str
    suffixes: List[str]
    stem: str
    parent: Path
    def __new__(cls: Type[Path], *args: Union[str, Path]) -> Path: ...
    def as_uri(self) -> str: ...
    def is_absolute(self) -> bool: ...
    def relative_to(self, other: Path, strict: bool = ...) -> Path: ...
    def with_name(self, name: str) -> Path: ...
    def with_suffix(self, suffix: str) -> Path: ...
    @classmethod
    def cwd(cls) -> Path: ...
    def stat(self) -> os.stat_result: ...
    def exists(self) -> bool: ...
    def glob(self, pattern: str) -> Generator[Path, None, None]: ...
    def is_dir(self) -> bool: ...
    def is_file(self) -> bool: ...
    def is_symlink(self) -> bool: ...
    def mkdir(self, mode: int = ..., parents: bool = ..., exist_ok: bool = ...) -> None: ...
    def open(
        self,
        mode: str = ...,
        buffering: int = ...,
        encoding: Optional[str] = ...,
        errors: Optional[str] = ...,
        newline: Optional[str] = ...,
    ) -> IO[Any]: ...
    def resolve(self, strict: bool = ...) -> Path: ...
    def rmdir(self) -> None: ...
    def rmtree(self, ignore_errors: bool = ..., onerror: bool = ...) -> None: ...
    def symlink_to(self, target: Path, target_is_directory: bool = ...) -> None: ...
    def touch(self, mode: int = ..., exist_ok: bool = ...) -> None: ...
    def unlink(self) -> None: ...
    @classmethod
    def home(cls) -> Path: ...
    def absolute(self) -> Path: ...
    def read_bytes(self) -> bytes: ...
    def read_text(self, encoding: Optional[str] = ..., errors: Optional[str] = ...) -> str: ...
    def write_bytes(self, data: bytes) -> int: ...
    def samefile(self, other_path: Path) -> bool: ...
    def write_text(
        self, data: str, encoding: Optional[str] = ..., errors: Optional[str] = ...
    ) -> int: ...
